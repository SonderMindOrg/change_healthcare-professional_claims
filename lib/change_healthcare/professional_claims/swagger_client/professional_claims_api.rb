# frozen_string_literal: true

# #Medical Network Professional Claims v3
#
# Reference for developers
#
# OpenAPI spec version: v3
#
# Generated by: https://github.com/swagger-api/swagger-codegen.git
# Swagger Codegen version: 2.4.19
#

require 'uri'

module ChangeHealthcare
  module ProfessionalClaims
    module SwaggerClient
      class ProfessionalClaimsApi
        attr_accessor :api_client

        def initialize(api_client = ApiClient.default)
          @api_client = api_client
        end

        # healthCheck
        # @param authorization Bearer Your-Access-Token
        # @param [Hash] opts the optional parameters
        # @return [Hash<String, String>]
        def health_check_using_get(authorization, opts = {})
          data, _status_code, _headers = health_check_using_get_with_http_info(authorization, opts)
          data
        end

        # healthCheck
        # @param authorization Bearer Your-Access-Token
        # @param [Hash] opts the optional parameters
        # @return [Array<(Hash<String, String>, Fixnum, Hash)>] Hash<String, String> data, response status code and response headers
        def health_check_using_get_with_http_info(authorization, _opts = {})
          @api_client.config.logger.debug 'Calling API: ProfessionalClaimsApi.health_check_using_get ...' if @api_client.config.debugging
          # verify the required parameter 'authorization' is set
          if @api_client.config.client_side_validation && authorization.nil?
            raise ArgumentError,
                  "Missing the required parameter 'authorization' when calling ProfessionalClaimsApi.health_check_using_get"
          end

          # resource path
          local_var_path = '/healthcheck'

          # query parameters
          query_params = {}

          # header parameters
          header_params = {}
          # HTTP header 'Accept' (if needed)
          header_params['Accept'] = @api_client.select_header_accept(['application/json'])
          header_params[:Authorization] = authorization

          # form parameters
          form_params = {}

          # http body (model)
          post_body = nil
          auth_names = []
          data, status_code, headers = @api_client.call_api(:GET, local_var_path,
                                                            header_params: header_params,
                                                            query_params: query_params,
                                                            form_params: form_params,
                                                            body: post_body,
                                                            auth_names: auth_names,
                                                            return_type: 'Hash<String, String>')
          @api_client.config.logger.debug "API called: ProfessionalClaimsApi#health_check_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
          [data, status_code, headers]
        end

        # submits your claim to the payer
        # @param authorization Bearer Your-Access-Token
        # @param request request
        # @param [Hash] opts the optional parameters
        # @return [Response]
        def process_claim_using_post(authorization, request, opts = {})
          data, _status_code, _headers = process_claim_using_post_with_http_info(authorization, request, opts)
          data
        end

        # submits your claim to the payer
        # @param authorization Bearer Your-Access-Token
        # @param request request
        # @param [Hash] opts the optional parameters
        # @return [Array<(Response, Fixnum, Hash)>] Response data, response status code and response headers
        def process_claim_using_post_with_http_info(authorization, request, _opts = {})
          @api_client.config.logger.debug 'Calling API: ProfessionalClaimsApi.process_claim_using_post ...' if @api_client.config.debugging
          # verify the required parameter 'authorization' is set
          if @api_client.config.client_side_validation && authorization.nil?
            raise ArgumentError,
                  "Missing the required parameter 'authorization' when calling ProfessionalClaimsApi.process_claim_using_post"
          end
          # verify the required parameter 'request' is set
          if @api_client.config.client_side_validation && request.nil?
            raise ArgumentError,
                  "Missing the required parameter 'request' when calling ProfessionalClaimsApi.process_claim_using_post"
          end

          # resource path
          local_var_path = '/submission'

          # query parameters
          query_params = {}

          # header parameters
          header_params = {}
          # HTTP header 'Accept' (if needed)
          header_params['Accept'] = @api_client.select_header_accept(['application/json'])
          # HTTP header 'Content-Type'
          header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
          header_params[:Authorization] = authorization

          # form parameters
          form_params = {}

          # http body (model)
          post_body = @api_client.object_to_http_body(request)
          auth_names = []
          data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                            header_params: header_params,
                                                            query_params: query_params,
                                                            form_params: form_params,
                                                            body: post_body,
                                                            auth_names: auth_names,
                                                            return_type: 'Response')
          @api_client.config.logger.debug "API called: ProfessionalClaimsApi#process_claim_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
          [data, status_code, headers]
        end

        # send raw 837
        # @param authorization Bearer Your-Access-Token
        # @param request request
        # @param [Hash] opts the optional parameters
        # @option opts [String] :x_chc_claim_submission_biller_id X-CHC-ClaimSubmission-BillerId
        # @option opts [String] :x_chc_claim_submission_pwd X-CHC-ClaimSubmission-Pwd
        # @option opts [String] :x_chc_claim_submission_submitter_id X-CHC-ClaimSubmission-SubmitterId
        # @option opts [String] :x_chc_claim_submission_username X-CHC-ClaimSubmission-Username
        # @return [Response]
        def raw_x12_submission_using_post(authorization, request, opts = {})
          data, _status_code, _headers = raw_x12_submission_using_post_with_http_info(authorization, request, opts)
          data
        end

        # send raw 837
        # @param authorization Bearer Your-Access-Token
        # @param request request
        # @param [Hash] opts the optional parameters
        # @option opts [String] :x_chc_claim_submission_biller_id X-CHC-ClaimSubmission-BillerId
        # @option opts [String] :x_chc_claim_submission_pwd X-CHC-ClaimSubmission-Pwd
        # @option opts [String] :x_chc_claim_submission_submitter_id X-CHC-ClaimSubmission-SubmitterId
        # @option opts [String] :x_chc_claim_submission_username X-CHC-ClaimSubmission-Username
        # @return [Array<(Response, Fixnum, Hash)>] Response data, response status code and response headers
        def raw_x12_submission_using_post_with_http_info(authorization, request, opts = {})
          @api_client.config.logger.debug 'Calling API: ProfessionalClaimsApi.raw_x12_submission_using_post ...' if @api_client.config.debugging
          # verify the required parameter 'authorization' is set
          if @api_client.config.client_side_validation && authorization.nil?
            raise ArgumentError,
                  "Missing the required parameter 'authorization' when calling ProfessionalClaimsApi.raw_x12_submission_using_post"
          end
          # verify the required parameter 'request' is set
          if @api_client.config.client_side_validation && request.nil?
            raise ArgumentError,
                  "Missing the required parameter 'request' when calling ProfessionalClaimsApi.raw_x12_submission_using_post"
          end

          # resource path
          local_var_path = '/raw-x12-submission'

          # query parameters
          query_params = {}

          # header parameters
          header_params = {}
          # HTTP header 'Accept' (if needed)
          header_params['Accept'] = @api_client.select_header_accept(['application/json'])
          # HTTP header 'Content-Type'
          header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
          header_params[:Authorization] = authorization
          unless opts[:x_chc_claim_submission_biller_id].nil?
            header_params[:'X-CHC-ClaimSubmission-BillerId'] =
              opts[:x_chc_claim_submission_biller_id]
          end
          unless opts[:x_chc_claim_submission_pwd].nil?
            header_params[:'X-CHC-ClaimSubmission-Pwd'] =
              opts[:x_chc_claim_submission_pwd]
          end
          unless opts[:x_chc_claim_submission_submitter_id].nil?
            header_params[:'X-CHC-ClaimSubmission-SubmitterId'] =
              opts[:x_chc_claim_submission_submitter_id]
          end
          unless opts[:x_chc_claim_submission_username].nil?
            header_params[:'X-CHC-ClaimSubmission-Username'] =
              opts[:x_chc_claim_submission_username]
          end

          # form parameters
          form_params = {}

          # http body (model)
          post_body = @api_client.object_to_http_body(request)
          auth_names = []
          data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                            header_params: header_params,
                                                            query_params: query_params,
                                                            form_params: form_params,
                                                            body: post_body,
                                                            auth_names: auth_names,
                                                            return_type: 'Response')
          @api_client.config.logger.debug "API called: ProfessionalClaimsApi#raw_x12_submission_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
          [data, status_code, headers]
        end

        # validate raw 837
        # @param authorization Bearer Your-Access-Token
        # @param request request
        # @param [Hash] opts the optional parameters
        # @option opts [String] :x_chc_claim_submission_biller_id X-CHC-ClaimSubmission-BillerId
        # @option opts [String] :x_chc_claim_submission_pwd X-CHC-ClaimSubmission-Pwd
        # @option opts [String] :x_chc_claim_submission_submitter_id X-CHC-ClaimSubmission-SubmitterId
        # @option opts [String] :x_chc_claim_submission_username X-CHC-ClaimSubmission-Username
        # @return [Response]
        def raw_x12_validation_using_post(authorization, request, opts = {})
          data, _status_code, _headers = raw_x12_validation_using_post_with_http_info(authorization, request, opts)
          data
        end

        # validate raw 837
        # @param authorization Bearer Your-Access-Token
        # @param request request
        # @param [Hash] opts the optional parameters
        # @option opts [String] :x_chc_claim_submission_biller_id X-CHC-ClaimSubmission-BillerId
        # @option opts [String] :x_chc_claim_submission_pwd X-CHC-ClaimSubmission-Pwd
        # @option opts [String] :x_chc_claim_submission_submitter_id X-CHC-ClaimSubmission-SubmitterId
        # @option opts [String] :x_chc_claim_submission_username X-CHC-ClaimSubmission-Username
        # @return [Array<(Response, Fixnum, Hash)>] Response data, response status code and response headers
        def raw_x12_validation_using_post_with_http_info(authorization, request, opts = {})
          @api_client.config.logger.debug 'Calling API: ProfessionalClaimsApi.raw_x12_validation_using_post ...' if @api_client.config.debugging
          # verify the required parameter 'authorization' is set
          if @api_client.config.client_side_validation && authorization.nil?
            raise ArgumentError,
                  "Missing the required parameter 'authorization' when calling ProfessionalClaimsApi.raw_x12_validation_using_post"
          end
          # verify the required parameter 'request' is set
          if @api_client.config.client_side_validation && request.nil?
            raise ArgumentError,
                  "Missing the required parameter 'request' when calling ProfessionalClaimsApi.raw_x12_validation_using_post"
          end

          # resource path
          local_var_path = '/raw-x12-validation'

          # query parameters
          query_params = {}

          # header parameters
          header_params = {}
          # HTTP header 'Accept' (if needed)
          header_params['Accept'] = @api_client.select_header_accept(['application/json'])
          # HTTP header 'Content-Type'
          header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
          header_params[:Authorization] = authorization
          unless opts[:x_chc_claim_submission_biller_id].nil?
            header_params[:'X-CHC-ClaimSubmission-BillerId'] =
              opts[:x_chc_claim_submission_biller_id]
          end
          unless opts[:x_chc_claim_submission_pwd].nil?
            header_params[:'X-CHC-ClaimSubmission-Pwd'] =
              opts[:x_chc_claim_submission_pwd]
          end
          unless opts[:x_chc_claim_submission_submitter_id].nil?
            header_params[:'X-CHC-ClaimSubmission-SubmitterId'] =
              opts[:x_chc_claim_submission_submitter_id]
          end
          unless opts[:x_chc_claim_submission_username].nil?
            header_params[:'X-CHC-ClaimSubmission-Username'] =
              opts[:x_chc_claim_submission_username]
          end

          # form parameters
          form_params = {}

          # http body (model)
          post_body = @api_client.object_to_http_body(request)
          auth_names = []
          data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                            header_params: header_params,
                                                            query_params: query_params,
                                                            form_params: form_params,
                                                            body: post_body,
                                                            auth_names: auth_names,
                                                            return_type: 'Response')
          @api_client.config.logger.debug "API called: ProfessionalClaimsApi#raw_x12_validation_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
          [data, status_code, headers]
        end

        # validates your claim by the payer
        # @param authorization Bearer Your-Access-Token
        # @param request request
        # @param [Hash] opts the optional parameters
        # @return [Response]
        def validate_claim_using_post(authorization, request, opts = {})
          data, _status_code, _headers = validate_claim_using_post_with_http_info(authorization, request, opts)
          data
        end

        # validates your claim by the payer
        # @param authorization Bearer Your-Access-Token
        # @param request request
        # @param [Hash] opts the optional parameters
        # @return [Array<(Response, Fixnum, Hash)>] Response data, response status code and response headers
        def validate_claim_using_post_with_http_info(authorization, request, _opts = {})
          @api_client.config.logger.debug 'Calling API: ProfessionalClaimsApi.validate_claim_using_post ...' if @api_client.config.debugging
          # verify the required parameter 'authorization' is set
          if @api_client.config.client_side_validation && authorization.nil?
            raise ArgumentError,
                  "Missing the required parameter 'authorization' when calling ProfessionalClaimsApi.validate_claim_using_post"
          end
          # verify the required parameter 'request' is set
          if @api_client.config.client_side_validation && request.nil?
            raise ArgumentError,
                  "Missing the required parameter 'request' when calling ProfessionalClaimsApi.validate_claim_using_post"
          end

          # resource path
          local_var_path = '/validation'

          # query parameters
          query_params = {}

          # header parameters
          header_params = {}
          # HTTP header 'Accept' (if needed)
          header_params['Accept'] = @api_client.select_header_accept(['application/json'])
          # HTTP header 'Content-Type'
          header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
          header_params[:Authorization] = authorization

          # form parameters
          form_params = {}

          # http body (model)
          post_body = @api_client.object_to_http_body(request)
          auth_names = []
          data, status_code, headers = @api_client.call_api(:POST, local_var_path,
                                                            header_params: header_params,
                                                            query_params: query_params,
                                                            form_params: form_params,
                                                            body: post_body,
                                                            auth_names: auth_names,
                                                            return_type: 'Response')
          @api_client.config.logger.debug "API called: ProfessionalClaimsApi#validate_claim_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
          [data, status_code, headers]
        end
      end
    end
  end
end
