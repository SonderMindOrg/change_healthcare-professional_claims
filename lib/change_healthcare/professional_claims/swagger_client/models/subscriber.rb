# frozen_string_literal: true

# #Medical Network Professional Claims v3
#
# Reference for developers
#
# OpenAPI spec version: v3
#
# Generated by: https://github.com/swagger-api/swagger-codegen.git
# Swagger Codegen version: 2.4.19
#

require 'date'

module ChangeHealthcare
  module ProfessionalClaims
    module SwaggerClient
      class Subscriber
        attr_accessor :address, :date_of_birth, :first_name, :group_number, :last_name, :member_id, :middle_name,
                      :payment_responsibility_level_code, :policy_number, :ssn, :subscriber_group_name

        # notes
        attr_accessor :gender

        # notes
        attr_accessor :insurance_type_code

        class EnumAttributeValidator
          attr_reader :datatype, :allowable_values

          def initialize(datatype, allowable_values)
            @allowable_values = allowable_values.map do |value|
              case datatype.to_s
              when /Integer/i
                value.to_i
              when /Float/i
                value.to_f
              else
                value
              end
            end
          end

          def valid?(value)
            !value || allowable_values.include?(value)
          end
        end

        # Attribute mapping from ruby-style variable name to JSON key.
        def self.attribute_map
          {
            address: :address,
            date_of_birth: :dateOfBirth,
            first_name: :firstName,
            gender: :gender,
            group_number: :groupNumber,
            insurance_type_code: :insuranceTypeCode,
            last_name: :lastName,
            member_id: :memberId,
            middle_name: :middleName,
            payment_responsibility_level_code: :paymentResponsibilityLevelCode,
            policy_number: :policyNumber,
            ssn: :ssn,
            subscriber_group_name: :subscriberGroupName
          }
        end

        # Attribute type mapping.
        def self.swagger_types
          {
            address: :Address,
            date_of_birth: :String,
            first_name: :String,
            gender: :String,
            group_number: :String,
            insurance_type_code: :String,
            last_name: :String,
            member_id: :String,
            middle_name: :String,
            payment_responsibility_level_code: :String,
            policy_number: :String,
            ssn: :String,
            subscriber_group_name: :String
          }
        end

        # Initializes the object
        # @param [Hash] attributes Model attributes in the form of hash
        def initialize(attributes = {})
          return unless attributes.is_a?(Hash)

          # convert string to symbol for hash key
          attributes = attributes.transform_keys(&:to_sym)

          self.address = attributes[:address] if attributes.key?(:address)

          self.date_of_birth = attributes[:dateOfBirth] if attributes.key?(:dateOfBirth)

          self.first_name = attributes[:firstName] if attributes.key?(:firstName)

          self.gender = attributes[:gender] if attributes.key?(:gender)

          self.group_number = attributes[:groupNumber] if attributes.key?(:groupNumber)

          self.insurance_type_code = attributes[:insuranceTypeCode] if attributes.key?(:insuranceTypeCode)

          self.last_name = attributes[:lastName] if attributes.key?(:lastName)

          self.member_id = attributes[:memberId] if attributes.key?(:memberId)

          self.middle_name = attributes[:middleName] if attributes.key?(:middleName)

          self.payment_responsibility_level_code = attributes[:paymentResponsibilityLevelCode] if attributes.key?(:paymentResponsibilityLevelCode)

          self.policy_number = attributes[:policyNumber] if attributes.key?(:policyNumber)

          self.ssn = attributes[:ssn] if attributes.key?(:ssn)

          self.subscriber_group_name = attributes[:subscriberGroupName] if attributes.key?(:subscriberGroupName)
        end

        # Show invalid properties with the reasons. Usually used together with valid?
        # @return Array for valid properties with the reasons
        def list_invalid_properties
          []
        end

        # Check to see if the all the properties in the model are valid
        # @return true if the model is valid
        def valid?
          gender_validator = EnumAttributeValidator.new('String', %w[M F U null])
          return false unless gender_validator.valid?(@gender)

          insurance_type_code_validator = EnumAttributeValidator.new('String',
                                                                     %w[12 13 14 15 16 41 42 43 47])
          return false unless insurance_type_code_validator.valid?(@insurance_type_code)

          true
        end

        # Custom attribute writer method checking allowed values (enum).
        # @param [Object] gender Object to be assigned
        def gender=(gender)
          validator = EnumAttributeValidator.new('String', %w[M F U null])
          unless validator.valid?(gender)
            raise ArgumentError,
                  %(invalid value for "gender", must be one of #{validator.allowable_values}.)
          end

          @gender = gender
        end

        # Custom attribute writer method checking allowed values (enum).
        # @param [Object] insurance_type_code Object to be assigned
        def insurance_type_code=(insurance_type_code)
          validator = EnumAttributeValidator.new('String', %w[12 13 14 15 16 41 42 43 47])
          unless validator.valid?(insurance_type_code)
            raise ArgumentError,
                  %(invalid value for "insurance_type_code", must be one of #{validator.allowable_values}.)
          end

          @insurance_type_code = insurance_type_code
        end

        # Checks equality by comparing each attribute.
        # @param [Object] Object to be compared
        def ==(other)
          return true if equal?(other)

          self.class == other.class &&
            address == other.address &&
            date_of_birth == other.date_of_birth &&
            first_name == other.first_name &&
            gender == other.gender &&
            group_number == other.group_number &&
            insurance_type_code == other.insurance_type_code &&
            last_name == other.last_name &&
            member_id == other.member_id &&
            middle_name == other.middle_name &&
            payment_responsibility_level_code == other.payment_responsibility_level_code &&
            policy_number == other.policy_number &&
            ssn == other.ssn &&
            subscriber_group_name == other.subscriber_group_name
        end

        # @see the `==` method
        # @param [Object] Object to be compared
        def eql?(other)
          self == other
        end

        # Calculates hash code according to all attributes.
        # @return [Fixnum] Hash code
        def hash
          [address, date_of_birth, first_name, gender, group_number, insurance_type_code, last_name, member_id,
           middle_name, payment_responsibility_level_code, policy_number, ssn, subscriber_group_name].hash
        end

        # Builds the object from hash
        # @param [Hash] attributes Model attributes in the form of hash
        # @return [Object] Returns the model itself
        def build_from_hash(attributes)
          return nil unless attributes.is_a?(Hash)

          self.class.swagger_types.each_pair do |key, type|
            if type =~ /\AArray<(.*)>/i
              # check to ensure the input is an array given that the attribute
              # is documented as an array but the input is not
              if attributes[self.class.attribute_map[key]].is_a?(Array)
                send("#{key}=", attributes[self.class.attribute_map[key]].map do |v|
                                  _deserialize(Regexp.last_match(1), v)
                                end)
              end
            elsif !attributes[self.class.attribute_map[key]].nil?
              send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
            end
          end

          self
        end

        # Deserializes the data based on type
        # @param string type Data type
        # @param string value Value to be deserialized
        # @return [Object] Deserialized data
        def _deserialize(type, value)
          case type.to_sym
          when :DateTime
            DateTime.parse(value)
          when :Date
            Date.parse(value)
          when :String
            value.to_s
          when :Integer
            value.to_i
          when :Float
            value.to_f
          when :BOOLEAN
            if value.to_s =~ /\A(true|t|yes|y|1)\z/i
              true
            else
              false
            end
          when :Object
            # generic object (usually a Hash), return directly
            value
          when /\AArray<(?<inner_type>.+)>\z/
            inner_type = Regexp.last_match[:inner_type]
            value.map { |v| _deserialize(inner_type, v) }
          when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
            k_type = Regexp.last_match[:k_type]
            v_type = Regexp.last_match[:v_type]
            {}.tap do |hash|
              value.each do |k, v|
                hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
              end
            end
          else # model
            temp_model = SwaggerClient.const_get(type).new
            temp_model.build_from_hash(value)
          end
        end

        # Returns the string representation of the object
        # @return [String] String presentation of the object
        def to_s
          to_hash.to_s
        end

        # to_body is an alias to to_hash (backward compatibility)
        # @return [Hash] Returns the object in the form of hash
        def to_body
          to_hash
        end

        # Returns the object in the form of hash
        # @return [Hash] Returns the object in the form of hash
        def to_hash
          hash = {}
          self.class.attribute_map.each_pair do |attr, param|
            value = send(attr)
            next if value.nil?

            hash[param] = _to_hash(value)
          end
          hash
        end

        # Outputs non-array value in the form of hash
        # For object, use to_hash. Otherwise, just return the value
        # @param [Object] value Any valid value
        # @return [Hash] Returns the value in the form of hash
        def _to_hash(value)
          if value.is_a?(Array)
            value.compact.map { |v| _to_hash(v) }
          elsif value.is_a?(Hash)
            {}.tap do |hash|
              value.each { |k, v| hash[k] = _to_hash(v) }
            end
          elsif value.respond_to? :to_hash
            value.to_hash
          else
            value
          end
        end
      end
    end
  end
end
