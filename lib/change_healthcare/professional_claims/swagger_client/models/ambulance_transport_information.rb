# frozen_string_literal: true

# #Medical Network Professional Claims v3
#
# Reference for developers
#
# OpenAPI spec version: v3
#
# Generated by: https://github.com/swagger-api/swagger-codegen.git
# Swagger Codegen version: 2.4.19
#

require 'date'

module ChangeHealthcare
  module ProfessionalClaims
    module SwaggerClient
      class AmbulanceTransportInformation
        ##
        # Allowed Values are:
        #
        # - 'A' Patient was transported to nearest facility for care of symptoms, complaints, or both,
        # - 'B' Patient was transported for the benefit of a preferred physician,
        # - 'C' Patient was transported for the nearness of family members
        # - 'D' Patient was transported for the care of a specialist or for availability of specialized equipment
        # - 'E' Patient Transferred to Rehabilitation Facility
        #
        # @return ['A', 'B', 'C', 'D', 'E']
        attr_reader :ambulance_transport_reason_code

        attr_accessor :patient_weight_in_pounds, :round_trip_purpose_description, :stretcher_purpose_description,
                      :transport_distance_in_miles

        class EnumAttributeValidator
          attr_reader :datatype, :allowable_values

          def initialize(datatype, allowable_values)
            @allowable_values = allowable_values.map do |value|
              case datatype.to_s
              when /Integer/i
                value.to_i
              when /Float/i
                value.to_f
              else
                value
              end
            end
          end

          def valid?(value)
            !value || allowable_values.include?(value)
          end
        end

        # Attribute mapping from ruby-style variable name to JSON key.
        def self.attribute_map
          {
            ambulance_transport_reason_code: :ambulanceTransportReasonCode,
            patient_weight_in_pounds: :patientWeightInPounds,
            round_trip_purpose_description: :roundTripPurposeDescription,
            stretcher_purpose_description: :stretcherPurposeDescription,
            transport_distance_in_miles: :transportDistanceInMiles
          }
        end

        # Attribute type mapping.
        def self.swagger_types
          {
            ambulance_transport_reason_code: :String,
            patient_weight_in_pounds: :String,
            round_trip_purpose_description: :String,
            stretcher_purpose_description: :String,
            transport_distance_in_miles: :String
          }
        end

        # Initializes the object
        # @param [Hash] attributes Model attributes in the form of hash
        def initialize(attributes = {})
          return unless attributes.is_a?(Hash)

          # convert string to symbol for hash key
          attributes = attributes.transform_keys(&:to_sym)

          self.ambulance_transport_reason_code = attributes[:ambulanceTransportReasonCode] if attributes.key?(:ambulanceTransportReasonCode)

          self.patient_weight_in_pounds = attributes[:patientWeightInPounds] if attributes.key?(:patientWeightInPounds)

          self.round_trip_purpose_description = attributes[:roundTripPurposeDescription] if attributes.key?(:roundTripPurposeDescription)

          self.stretcher_purpose_description = attributes[:stretcherPurposeDescription] if attributes.key?(:stretcherPurposeDescription)

          self.transport_distance_in_miles = attributes[:transportDistanceInMiles] if attributes.key?(:transportDistanceInMiles)
        end

        # Show invalid properties with the reasons. Usually used together with valid?
        # @return Array for valid properties with the reasons
        def list_invalid_properties
          []
        end

        # Check to see if the all the properties in the model are valid
        # @return true if the model is valid
        def valid?
          ambulance_transport_reason_code_validator = EnumAttributeValidator.new('String', %w[A B C D E])
          return false unless ambulance_transport_reason_code_validator.valid?(@ambulance_transport_reason_code)

          true
        end

        # Custom attribute writer method checking allowed values (enum).
        # @param [Object] ambulance_transport_reason_code Object to be assigned
        def ambulance_transport_reason_code=(ambulance_transport_reason_code)
          validator = EnumAttributeValidator.new('String', %w[A B C D E])
          unless validator.valid?(ambulance_transport_reason_code)
            raise ArgumentError,
                  %(invalid value for "ambulance_transport_reason_code", must be one of #{validator.allowable_values}.)
          end

          @ambulance_transport_reason_code = ambulance_transport_reason_code
        end

        # Checks equality by comparing each attribute.
        # @param [Object] Object to be compared
        def ==(other)
          return true if equal?(other)

          self.class == other.class &&
            ambulance_transport_reason_code == other.ambulance_transport_reason_code &&
            patient_weight_in_pounds == other.patient_weight_in_pounds &&
            round_trip_purpose_description == other.round_trip_purpose_description &&
            stretcher_purpose_description == other.stretcher_purpose_description &&
            transport_distance_in_miles == other.transport_distance_in_miles
        end

        # @see the `==` method
        # @param [Object] Object to be compared
        def eql?(other)
          self == other
        end

        # Calculates hash code according to all attributes.
        # @return [Fixnum] Hash code
        def hash
          [ambulance_transport_reason_code, patient_weight_in_pounds, round_trip_purpose_description,
           stretcher_purpose_description, transport_distance_in_miles].hash
        end

        # Builds the object from hash
        # @param [Hash] attributes Model attributes in the form of hash
        # @return [Object] Returns the model itself
        def build_from_hash(attributes)
          return nil unless attributes.is_a?(Hash)

          self.class.swagger_types.each_pair do |key, type|
            if type =~ /\AArray<(.*)>/i
              # check to ensure the input is an array given that the attribute
              # is documented as an array but the input is not
              if attributes[self.class.attribute_map[key]].is_a?(Array)
                send("#{key}=", attributes[self.class.attribute_map[key]].map do |v|
                                  _deserialize(Regexp.last_match(1), v)
                                end)
              end
            elsif !attributes[self.class.attribute_map[key]].nil?
              send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
            end
          end

          self
        end

        # Deserializes the data based on type
        # @param string type Data type
        # @param string value Value to be deserialized
        # @return [Object] Deserialized data
        def _deserialize(type, value)
          case type.to_sym
          when :DateTime
            DateTime.parse(value)
          when :Date
            Date.parse(value)
          when :String
            value.to_s
          when :Integer
            value.to_i
          when :Float
            value.to_f
          when :BOOLEAN
            if value.to_s =~ /\A(true|t|yes|y|1)\z/i
              true
            else
              false
            end
          when :Object
            # generic object (usually a Hash), return directly
            value
          when /\AArray<(?<inner_type>.+)>\z/
            inner_type = Regexp.last_match[:inner_type]
            value.map { |v| _deserialize(inner_type, v) }
          when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
            k_type = Regexp.last_match[:k_type]
            v_type = Regexp.last_match[:v_type]
            {}.tap do |hash|
              value.each do |k, v|
                hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
              end
            end
          else # model
            temp_model = SwaggerClient.const_get(type).new
            temp_model.build_from_hash(value)
          end
        end

        # Returns the string representation of the object
        # @return [String] String presentation of the object
        def to_s
          to_hash.to_s
        end

        # to_body is an alias to to_hash (backward compatibility)
        # @return [Hash] Returns the object in the form of hash
        def to_body
          to_hash
        end

        # Returns the object in the form of hash
        # @return [Hash] Returns the object in the form of hash
        def to_hash
          hash = {}
          self.class.attribute_map.each_pair do |attr, param|
            value = send(attr)
            next if value.nil?

            hash[param] = _to_hash(value)
          end
          hash
        end

        # Outputs non-array value in the form of hash
        # For object, use to_hash. Otherwise, just return the value
        # @param [Object] value Any valid value
        # @return [Hash] Returns the value in the form of hash
        def _to_hash(value)
          if value.is_a?(Array)
            value.compact.map { |v| _to_hash(v) }
          elsif value.is_a?(Hash)
            {}.tap do |hash|
              value.each { |k, v| hash[k] = _to_hash(v) }
            end
          elsif value.respond_to? :to_hash
            value.to_hash
          else
            value
          end
        end
      end
    end
  end
end
