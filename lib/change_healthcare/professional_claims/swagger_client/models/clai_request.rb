# frozen_string_literal: true

# #Medical Network Professional Claims v3
#
# Reference for developers
#
# OpenAPI spec version: v3
#
# Generated by: https://github.com/swagger-api/swagger-codegen.git
# Swagger Codegen version: 2.4.19
#

require 'date'

module ChangeHealthcare
  module ProfessionalClaims
    module SwaggerClient
      class ClaiRequest
        attr_accessor :billing, :claim_information, :control_number, :dependent, :ordering, :pay_to_address, :pay_to_plan,
                      :payer_address, :precision_threshold, :providers, :receiver, :referring, :rendering, :submitter, :subscriber, :supervising, :trading_partner_id, :trading_partner_name, :trading_partner_service_id

        # Attribute mapping from ruby-style variable name to JSON key.
        def self.attribute_map
          {
            billing: :billing,
            claim_information: :claimInformation,
            control_number: :controlNumber,
            dependent: :dependent,
            ordering: :ordering,
            pay_to_address: :payToAddress,
            pay_to_plan: :payToPlan,
            payer_address: :payerAddress,
            precision_threshold: :precisionThreshold,
            providers: :providers,
            receiver: :receiver,
            referring: :referring,
            rendering: :rendering,
            submitter: :submitter,
            subscriber: :subscriber,
            supervising: :supervising,
            trading_partner_id: :tradingPartnerId,
            trading_partner_name: :tradingPartnerName,
            trading_partner_service_id: :tradingPartnerServiceId
          }
        end

        # Attribute type mapping.
        def self.swagger_types
          {
            billing: :Provider,
            claim_information: :ClaimInformation,
            control_number: :String,
            dependent: :Dependent,
            ordering: :Provider,
            pay_to_address: :Address,
            pay_to_plan: :PayToPlan,
            payer_address: :Address,
            precision_threshold: :Float,
            providers: :'Array<Provider>',
            receiver: :Receiver,
            referring: :Provider,
            rendering: :Provider,
            submitter: :Submitter,
            subscriber: :Subscriber,
            supervising: :Provider,
            trading_partner_id: :String,
            trading_partner_name: :String,
            trading_partner_service_id: :String
          }
        end

        # Initializes the object
        # @param [Hash] attributes Model attributes in the form of hash
        def initialize(attributes = {})
          return unless attributes.is_a?(Hash)

          # convert string to symbol for hash key
          attributes = attributes.transform_keys(&:to_sym)

          self.billing = attributes[:billing] if attributes.key?(:billing)

          self.claim_information = attributes[:claimInformation] if attributes.key?(:claimInformation)

          self.control_number = attributes[:controlNumber] if attributes.key?(:controlNumber)

          self.dependent = attributes[:dependent] if attributes.key?(:dependent)

          self.ordering = attributes[:ordering] if attributes.key?(:ordering)

          self.pay_to_address = attributes[:payToAddress] if attributes.key?(:payToAddress)

          self.pay_to_plan = attributes[:payToPlan] if attributes.key?(:payToPlan)

          self.payer_address = attributes[:payerAddress] if attributes.key?(:payerAddress)

          self.precision_threshold = attributes[:precisionThreshold] if attributes.key?(:precisionThreshold)

          if attributes.key?(:providers) && (value = attributes[:providers]).is_a?(Array)
            self.providers = value
          end

          self.receiver = attributes[:receiver] if attributes.key?(:receiver)

          self.referring = attributes[:referring] if attributes.key?(:referring)

          self.rendering = attributes[:rendering] if attributes.key?(:rendering)

          self.submitter = attributes[:submitter] if attributes.key?(:submitter)

          self.subscriber = attributes[:subscriber] if attributes.key?(:subscriber)

          self.supervising = attributes[:supervising] if attributes.key?(:supervising)

          self.trading_partner_id = attributes[:tradingPartnerId] if attributes.key?(:tradingPartnerId)

          self.trading_partner_name = attributes[:tradingPartnerName] if attributes.key?(:tradingPartnerName)

          self.trading_partner_service_id = attributes[:tradingPartnerServiceId] if attributes.key?(:tradingPartnerServiceId)
        end

        # Show invalid properties with the reasons. Usually used together with valid?
        # @return Array for valid properties with the reasons
        def list_invalid_properties
          []
        end

        # Check to see if the all the properties in the model are valid
        # @return true if the model is valid
        def valid?
          true
        end

        # Checks equality by comparing each attribute.
        # @param [Object] Object to be compared
        def ==(other)
          return true if equal?(other)

          self.class == other.class &&
            billing == other.billing &&
            claim_information == other.claim_information &&
            control_number == other.control_number &&
            dependent == other.dependent &&
            ordering == other.ordering &&
            pay_to_address == other.pay_to_address &&
            pay_to_plan == other.pay_to_plan &&
            payer_address == other.payer_address &&
            precision_threshold == other.precision_threshold &&
            providers == other.providers &&
            receiver == other.receiver &&
            referring == other.referring &&
            rendering == other.rendering &&
            submitter == other.submitter &&
            subscriber == other.subscriber &&
            supervising == other.supervising &&
            trading_partner_id == other.trading_partner_id &&
            trading_partner_name == other.trading_partner_name &&
            trading_partner_service_id == other.trading_partner_service_id
        end

        # @see the `==` method
        # @param [Object] Object to be compared
        def eql?(other)
          self == other
        end

        # Calculates hash code according to all attributes.
        # @return [Fixnum] Hash code
        def hash
          [billing, claim_information, control_number, dependent, ordering, pay_to_address, pay_to_plan, payer_address,
           precision_threshold, providers, receiver, referring, rendering, submitter, subscriber, supervising, trading_partner_id, trading_partner_name, trading_partner_service_id].hash
        end

        # Builds the object from hash
        # @param [Hash] attributes Model attributes in the form of hash
        # @return [Object] Returns the model itself
        def build_from_hash(attributes)
          return nil unless attributes.is_a?(Hash)

          self.class.swagger_types.each_pair do |key, type|
            if type =~ /\AArray<(.*)>/i
              # check to ensure the input is an array given that the attribute
              # is documented as an array but the input is not
              if attributes[self.class.attribute_map[key]].is_a?(Array)
                send("#{key}=", attributes[self.class.attribute_map[key]].map do |v|
                                  _deserialize(Regexp.last_match(1), v)
                                end)
              end
            elsif !attributes[self.class.attribute_map[key]].nil?
              send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
            end
          end

          self
        end

        # Deserializes the data based on type
        # @param string type Data type
        # @param string value Value to be deserialized
        # @return [Object] Deserialized data
        def _deserialize(type, value)
          case type.to_sym
          when :DateTime
            DateTime.parse(value)
          when :Date
            Date.parse(value)
          when :String
            value.to_s
          when :Integer
            value.to_i
          when :Float
            value.to_f
          when :BOOLEAN
            if value.to_s =~ /\A(true|t|yes|y|1)\z/i
              true
            else
              false
            end
          when :Object
            # generic object (usually a Hash), return directly
            value
          when /\AArray<(?<inner_type>.+)>\z/
            inner_type = Regexp.last_match[:inner_type]
            value.map { |v| _deserialize(inner_type, v) }
          when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
            k_type = Regexp.last_match[:k_type]
            v_type = Regexp.last_match[:v_type]
            {}.tap do |hash|
              value.each do |k, v|
                hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
              end
            end
          else # model
            temp_model = SwaggerClient.const_get(type).new
            temp_model.build_from_hash(value)
          end
        end

        # Returns the string representation of the object
        # @return [String] String presentation of the object
        def to_s
          to_hash.to_s
        end

        # to_body is an alias to to_hash (backward compatibility)
        # @return [Hash] Returns the object in the form of hash
        def to_body
          to_hash
        end

        # Returns the object in the form of hash
        # @return [Hash] Returns the object in the form of hash
        def to_hash
          hash = {}
          self.class.attribute_map.each_pair do |attr, param|
            value = send(attr)
            next if value.nil?

            hash[param] = _to_hash(value)
          end
          hash
        end

        # Outputs non-array value in the form of hash
        # For object, use to_hash. Otherwise, just return the value
        # @param [Object] value Any valid value
        # @return [Hash] Returns the value in the form of hash
        def _to_hash(value)
          if value.is_a?(Array)
            value.compact.map { |v| _to_hash(v) }
          elsif value.is_a?(Hash)
            {}.tap do |hash|
              value.each { |k, v| hash[k] = _to_hash(v) }
            end
          elsif value.respond_to? :to_hash
            value.to_hash
          else
            value
          end
        end
      end
    end
  end
end
