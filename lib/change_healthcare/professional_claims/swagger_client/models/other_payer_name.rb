# frozen_string_literal: true

# #Medical Network Professional Claims v3
#
# Reference for developers
#
# OpenAPI spec version: v3
#
# Generated by: https://github.com/swagger-api/swagger-codegen.git
# Swagger Codegen version: 2.4.19
#

require 'date'

module ChangeHealthcare
  module ProfessionalClaims
    module SwaggerClient
      class OtherPayerName
        attr_accessor :other_insured_additional_identifier, :other_payer_address,
                      :other_payer_adjudication_or_payment_date, :other_payer_claim_adjustment_indicator, :other_payer_claim_control_number, :other_payer_identifier, :other_payer_organization_name, :other_payer_prior_authorization_number, :other_payer_prior_authorization_or_referral_number

        # Allowed Values are: 'PI' Payor Identification, 'XV' Centers for Medicare and Medicaid Services PlanID
        attr_accessor :other_payer_identifier_type_code

        # Allowed Values are: '2U' Payer Identification Number, 'EI' Employerâ€™s Identification Number, 'FY' Claim Office Number, 'NF' National Association of Insurance Commissioners (NAIC) Code
        attr_accessor :other_payer_secondary_identifier

        class EnumAttributeValidator
          attr_reader :datatype, :allowable_values

          def initialize(datatype, allowable_values)
            @allowable_values = allowable_values.map do |value|
              case datatype.to_s
              when /Integer/i
                value.to_i
              when /Float/i
                value.to_f
              else
                value
              end
            end
          end

          def valid?(value)
            !value || allowable_values.include?(value)
          end
        end

        # Attribute mapping from ruby-style variable name to JSON key.
        def self.attribute_map
          {
            other_insured_additional_identifier: :otherInsuredAdditionalIdentifier,
            other_payer_address: :otherPayerAddress,
            other_payer_adjudication_or_payment_date: :otherPayerAdjudicationOrPaymentDate,
            other_payer_claim_adjustment_indicator: :otherPayerClaimAdjustmentIndicator,
            other_payer_claim_control_number: :otherPayerClaimControlNumber,
            other_payer_identifier: :otherPayerIdentifier,
            other_payer_identifier_type_code: :otherPayerIdentifierTypeCode,
            other_payer_organization_name: :otherPayerOrganizationName,
            other_payer_prior_authorization_number: :otherPayerPriorAuthorizationNumber,
            other_payer_prior_authorization_or_referral_number: :otherPayerPriorAuthorizationOrReferralNumber,
            other_payer_secondary_identifier: :otherPayerSecondaryIdentifier
          }
        end

        # Attribute type mapping.
        def self.swagger_types
          {
            other_insured_additional_identifier: :String,
            other_payer_address: :Address,
            other_payer_adjudication_or_payment_date: :String,
            other_payer_claim_adjustment_indicator: :BOOLEAN,
            other_payer_claim_control_number: :String,
            other_payer_identifier: :String,
            other_payer_identifier_type_code: :String,
            other_payer_organization_name: :String,
            other_payer_prior_authorization_number: :String,
            other_payer_prior_authorization_or_referral_number: :String,
            other_payer_secondary_identifier: :'Array<ReferenceIdentification>'
          }
        end

        # Initializes the object
        # @param [Hash] attributes Model attributes in the form of hash
        def initialize(attributes = {})
          return unless attributes.is_a?(Hash)

          # convert string to symbol for hash key
          attributes = attributes.transform_keys(&:to_sym)

          self.other_insured_additional_identifier = attributes[:otherInsuredAdditionalIdentifier] if attributes.key?(:otherInsuredAdditionalIdentifier)

          self.other_payer_address = attributes[:otherPayerAddress] if attributes.key?(:otherPayerAddress)

          self.other_payer_adjudication_or_payment_date = attributes[:otherPayerAdjudicationOrPaymentDate] if attributes.key?(:otherPayerAdjudicationOrPaymentDate)

          self.other_payer_claim_adjustment_indicator = attributes[:otherPayerClaimAdjustmentIndicator] if attributes.key?(:otherPayerClaimAdjustmentIndicator)

          self.other_payer_claim_control_number = attributes[:otherPayerClaimControlNumber] if attributes.key?(:otherPayerClaimControlNumber)

          self.other_payer_identifier = attributes[:otherPayerIdentifier] if attributes.key?(:otherPayerIdentifier)

          self.other_payer_identifier_type_code = attributes[:otherPayerIdentifierTypeCode] if attributes.key?(:otherPayerIdentifierTypeCode)

          self.other_payer_organization_name = attributes[:otherPayerOrganizationName] if attributes.key?(:otherPayerOrganizationName)

          self.other_payer_prior_authorization_number = attributes[:otherPayerPriorAuthorizationNumber] if attributes.key?(:otherPayerPriorAuthorizationNumber)

          self.other_payer_prior_authorization_or_referral_number = attributes[:otherPayerPriorAuthorizationOrReferralNumber] if attributes.key?(:otherPayerPriorAuthorizationOrReferralNumber)

          if attributes.key?(:otherPayerSecondaryIdentifier) && (value = attributes[:otherPayerSecondaryIdentifier]).is_a?(Array)
            self.other_payer_secondary_identifier = value
          end
        end

        # Show invalid properties with the reasons. Usually used together with valid?
        # @return Array for valid properties with the reasons
        def list_invalid_properties
          []
        end

        # Check to see if the all the properties in the model are valid
        # @return true if the model is valid
        def valid?
          other_payer_identifier_type_code_validator = EnumAttributeValidator.new('String', %w[PI XV])
          return false unless other_payer_identifier_type_code_validator.valid?(@other_payer_identifier_type_code)

          true
        end

        # Custom attribute writer method checking allowed values (enum).
        # @param [Object] other_payer_identifier_type_code Object to be assigned
        def other_payer_identifier_type_code=(other_payer_identifier_type_code)
          validator = EnumAttributeValidator.new('String', %w[PI XV])
          unless validator.valid?(other_payer_identifier_type_code)
            raise ArgumentError,
                  %(invalid value for "other_payer_identifier_type_code", must be one of #{validator.allowable_values}.)
          end

          @other_payer_identifier_type_code = other_payer_identifier_type_code
        end

        # Checks equality by comparing each attribute.
        # @param [Object] Object to be compared
        def ==(other)
          return true if equal?(other)

          self.class == other.class &&
            other_insured_additional_identifier == other.other_insured_additional_identifier &&
            other_payer_address == other.other_payer_address &&
            other_payer_adjudication_or_payment_date == other.other_payer_adjudication_or_payment_date &&
            other_payer_claim_adjustment_indicator == other.other_payer_claim_adjustment_indicator &&
            other_payer_claim_control_number == other.other_payer_claim_control_number &&
            other_payer_identifier == other.other_payer_identifier &&
            other_payer_identifier_type_code == other.other_payer_identifier_type_code &&
            other_payer_organization_name == other.other_payer_organization_name &&
            other_payer_prior_authorization_number == other.other_payer_prior_authorization_number &&
            other_payer_prior_authorization_or_referral_number == other.other_payer_prior_authorization_or_referral_number &&
            other_payer_secondary_identifier == other.other_payer_secondary_identifier
        end

        # @see the `==` method
        # @param [Object] Object to be compared
        def eql?(other)
          self == other
        end

        # Calculates hash code according to all attributes.
        # @return [Fixnum] Hash code
        def hash
          [other_insured_additional_identifier, other_payer_address, other_payer_adjudication_or_payment_date,
           other_payer_claim_adjustment_indicator, other_payer_claim_control_number, other_payer_identifier, other_payer_identifier_type_code, other_payer_organization_name, other_payer_prior_authorization_number, other_payer_prior_authorization_or_referral_number, other_payer_secondary_identifier].hash
        end

        # Builds the object from hash
        # @param [Hash] attributes Model attributes in the form of hash
        # @return [Object] Returns the model itself
        def build_from_hash(attributes)
          return nil unless attributes.is_a?(Hash)

          self.class.swagger_types.each_pair do |key, type|
            if type =~ /\AArray<(.*)>/i
              # check to ensure the input is an array given that the attribute
              # is documented as an array but the input is not
              if attributes[self.class.attribute_map[key]].is_a?(Array)
                send("#{key}=", attributes[self.class.attribute_map[key]].map do |v|
                                  _deserialize(Regexp.last_match(1), v)
                                end)
              end
            elsif !attributes[self.class.attribute_map[key]].nil?
              send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
            end
          end

          self
        end

        # Deserializes the data based on type
        # @param string type Data type
        # @param string value Value to be deserialized
        # @return [Object] Deserialized data
        def _deserialize(type, value)
          case type.to_sym
          when :DateTime
            DateTime.parse(value)
          when :Date
            Date.parse(value)
          when :String
            value.to_s
          when :Integer
            value.to_i
          when :Float
            value.to_f
          when :BOOLEAN
            if value.to_s =~ /\A(true|t|yes|y|1)\z/i
              true
            else
              false
            end
          when :Object
            # generic object (usually a Hash), return directly
            value
          when /\AArray<(?<inner_type>.+)>\z/
            inner_type = Regexp.last_match[:inner_type]
            value.map { |v| _deserialize(inner_type, v) }
          when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
            k_type = Regexp.last_match[:k_type]
            v_type = Regexp.last_match[:v_type]
            {}.tap do |hash|
              value.each do |k, v|
                hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
              end
            end
          else # model
            temp_model = SwaggerClient.const_get(type).new
            temp_model.build_from_hash(value)
          end
        end

        # Returns the string representation of the object
        # @return [String] String presentation of the object
        def to_s
          to_hash.to_s
        end

        # to_body is an alias to to_hash (backward compatibility)
        # @return [Hash] Returns the object in the form of hash
        def to_body
          to_hash
        end

        # Returns the object in the form of hash
        # @return [Hash] Returns the object in the form of hash
        def to_hash
          hash = {}
          self.class.attribute_map.each_pair do |attr, param|
            value = send(attr)
            next if value.nil?

            hash[param] = _to_hash(value)
          end
          hash
        end

        # Outputs non-array value in the form of hash
        # For object, use to_hash. Otherwise, just return the value
        # @param [Object] value Any valid value
        # @return [Hash] Returns the value in the form of hash
        def _to_hash(value)
          if value.is_a?(Array)
            value.compact.map { |v| _to_hash(v) }
          elsif value.is_a?(Hash)
            {}.tap do |hash|
              value.each { |k, v| hash[k] = _to_hash(v) }
            end
          elsif value.respond_to? :to_hash
            value.to_hash
          else
            value
          end
        end
      end
    end
  end
end
