# frozen_string_literal: true

# #Medical Network Professional Claims v3
#
# Reference for developers
#
# OpenAPI spec version: v3
#
# Generated by: https://github.com/swagger-api/swagger-codegen.git
# Swagger Codegen version: 2.4.19
#

require 'date'

module ChangeHealthcare
  module ProfessionalClaims
    module SwaggerClient
      class ServiceLineProvider
        attr_accessor :address, :claim_office_number, :commercial_number, :contact_information, :employer_id,
                      :employer_identification_number, :first_name, :last_name, :location_number, :middle_name, :naic, :npi, :organization_name, :other_identifier, :payer_identification_number, :provider_type, :provider_upin_number, :secondary_identifier, :ssn, :state_license_number, :taxonomy_code

        # Attribute mapping from ruby-style variable name to JSON key.
        def self.attribute_map
          {
            address: :address,
            claim_office_number: :claimOfficeNumber,
            commercial_number: :commercialNumber,
            contact_information: :contactInformation,
            employer_id: :employerId,
            employer_identification_number: :employerIdentificationNumber,
            first_name: :firstName,
            last_name: :lastName,
            location_number: :locationNumber,
            middle_name: :middleName,
            naic: :naic,
            npi: :npi,
            organization_name: :organizationName,
            other_identifier: :otherIdentifier,
            payer_identification_number: :payerIdentificationNumber,
            provider_type: :providerType,
            provider_upin_number: :providerUpinNumber,
            secondary_identifier: :secondaryIdentifier,
            ssn: :ssn,
            state_license_number: :stateLicenseNumber,
            taxonomy_code: :taxonomyCode
          }
        end

        # Attribute type mapping.
        def self.swagger_types
          {
            address: :Address,
            claim_office_number: :String,
            commercial_number: :String,
            contact_information: :ContactInformation,
            employer_id: :String,
            employer_identification_number: :String,
            first_name: :String,
            last_name: :String,
            location_number: :String,
            middle_name: :String,
            naic: :String,
            npi: :String,
            organization_name: :String,
            other_identifier: :String,
            payer_identification_number: :String,
            provider_type: :String,
            provider_upin_number: :String,
            secondary_identifier: :'Array<ReferenceIdentification>',
            ssn: :String,
            state_license_number: :String,
            taxonomy_code: :String
          }
        end

        # Initializes the object
        # @param [Hash] attributes Model attributes in the form of hash
        def initialize(attributes = {})
          return unless attributes.is_a?(Hash)

          # convert string to symbol for hash key
          attributes = attributes.transform_keys(&:to_sym)

          self.address = attributes[:address] if attributes.key?(:address)

          self.claim_office_number = attributes[:claimOfficeNumber] if attributes.key?(:claimOfficeNumber)

          self.commercial_number = attributes[:commercialNumber] if attributes.key?(:commercialNumber)

          self.contact_information = attributes[:contactInformation] if attributes.key?(:contactInformation)

          self.employer_id = attributes[:employerId] if attributes.key?(:employerId)

          self.employer_identification_number = attributes[:employerIdentificationNumber] if attributes.key?(:employerIdentificationNumber)

          self.first_name = attributes[:firstName] if attributes.key?(:firstName)

          self.last_name = attributes[:lastName] if attributes.key?(:lastName)

          self.location_number = attributes[:locationNumber] if attributes.key?(:locationNumber)

          self.middle_name = attributes[:middleName] if attributes.key?(:middleName)

          self.naic = attributes[:naic] if attributes.key?(:naic)

          self.npi = attributes[:npi] if attributes.key?(:npi)

          self.organization_name = attributes[:organizationName] if attributes.key?(:organizationName)

          self.other_identifier = attributes[:otherIdentifier] if attributes.key?(:otherIdentifier)

          self.payer_identification_number = attributes[:payerIdentificationNumber] if attributes.key?(:payerIdentificationNumber)

          self.provider_type = attributes[:providerType] if attributes.key?(:providerType)

          self.provider_upin_number = attributes[:providerUpinNumber] if attributes.key?(:providerUpinNumber)

          if attributes.key?(:secondaryIdentifier) && (value = attributes[:secondaryIdentifier]).is_a?(Array)
            self.secondary_identifier = value
          end

          self.ssn = attributes[:ssn] if attributes.key?(:ssn)

          self.state_license_number = attributes[:stateLicenseNumber] if attributes.key?(:stateLicenseNumber)

          self.taxonomy_code = attributes[:taxonomyCode] if attributes.key?(:taxonomyCode)
        end

        # Show invalid properties with the reasons. Usually used together with valid?
        # @return Array for valid properties with the reasons
        def list_invalid_properties
          []
        end

        # Check to see if the all the properties in the model are valid
        # @return true if the model is valid
        def valid?
          true
        end

        # Checks equality by comparing each attribute.
        # @param [Object] Object to be compared
        def ==(other)
          return true if equal?(other)

          self.class == other.class &&
            address == other.address &&
            claim_office_number == other.claim_office_number &&
            commercial_number == other.commercial_number &&
            contact_information == other.contact_information &&
            employer_id == other.employer_id &&
            employer_identification_number == other.employer_identification_number &&
            first_name == other.first_name &&
            last_name == other.last_name &&
            location_number == other.location_number &&
            middle_name == other.middle_name &&
            naic == other.naic &&
            npi == other.npi &&
            organization_name == other.organization_name &&
            other_identifier == other.other_identifier &&
            payer_identification_number == other.payer_identification_number &&
            provider_type == other.provider_type &&
            provider_upin_number == other.provider_upin_number &&
            secondary_identifier == other.secondary_identifier &&
            ssn == other.ssn &&
            state_license_number == other.state_license_number &&
            taxonomy_code == other.taxonomy_code
        end

        # @see the `==` method
        # @param [Object] Object to be compared
        def eql?(other)
          self == other
        end

        # Calculates hash code according to all attributes.
        # @return [Fixnum] Hash code
        def hash
          [address, claim_office_number, commercial_number, contact_information, employer_id,
           employer_identification_number, first_name, last_name, location_number, middle_name, naic, npi, organization_name, other_identifier, payer_identification_number, provider_type, provider_upin_number, secondary_identifier, ssn, state_license_number, taxonomy_code].hash
        end

        # Builds the object from hash
        # @param [Hash] attributes Model attributes in the form of hash
        # @return [Object] Returns the model itself
        def build_from_hash(attributes)
          return nil unless attributes.is_a?(Hash)

          self.class.swagger_types.each_pair do |key, type|
            if type =~ /\AArray<(.*)>/i
              # check to ensure the input is an array given that the attribute
              # is documented as an array but the input is not
              if attributes[self.class.attribute_map[key]].is_a?(Array)
                send("#{key}=", attributes[self.class.attribute_map[key]].map do |v|
                                  _deserialize(Regexp.last_match(1), v)
                                end)
              end
            elsif !attributes[self.class.attribute_map[key]].nil?
              send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
            end
          end

          self
        end

        # Deserializes the data based on type
        # @param string type Data type
        # @param string value Value to be deserialized
        # @return [Object] Deserialized data
        def _deserialize(type, value)
          case type.to_sym
          when :DateTime
            DateTime.parse(value)
          when :Date
            Date.parse(value)
          when :String
            value.to_s
          when :Integer
            value.to_i
          when :Float
            value.to_f
          when :BOOLEAN
            if value.to_s =~ /\A(true|t|yes|y|1)\z/i
              true
            else
              false
            end
          when :Object
            # generic object (usually a Hash), return directly
            value
          when /\AArray<(?<inner_type>.+)>\z/
            inner_type = Regexp.last_match[:inner_type]
            value.map { |v| _deserialize(inner_type, v) }
          when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
            k_type = Regexp.last_match[:k_type]
            v_type = Regexp.last_match[:v_type]
            {}.tap do |hash|
              value.each do |k, v|
                hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
              end
            end
          else # model
            temp_model = SwaggerClient.const_get(type).new
            temp_model.build_from_hash(value)
          end
        end

        # Returns the string representation of the object
        # @return [String] String presentation of the object
        def to_s
          to_hash.to_s
        end

        # to_body is an alias to to_hash (backward compatibility)
        # @return [Hash] Returns the object in the form of hash
        def to_body
          to_hash
        end

        # Returns the object in the form of hash
        # @return [Hash] Returns the object in the form of hash
        def to_hash
          hash = {}
          self.class.attribute_map.each_pair do |attr, param|
            value = send(attr)
            next if value.nil?

            hash[param] = _to_hash(value)
          end
          hash
        end

        # Outputs non-array value in the form of hash
        # For object, use to_hash. Otherwise, just return the value
        # @param [Object] value Any valid value
        # @return [Hash] Returns the value in the form of hash
        def _to_hash(value)
          if value.is_a?(Array)
            value.compact.map { |v| _to_hash(v) }
          elsif value.is_a?(Hash)
            {}.tap do |hash|
              value.each { |k, v| hash[k] = _to_hash(v) }
            end
          elsif value.respond_to? :to_hash
            value.to_hash
          else
            value
          end
        end
      end
    end
  end
end
